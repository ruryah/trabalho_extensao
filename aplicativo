// Importar React e componentes necessários
import React, { useState } from 'react';
import { View, Text, TextInput, Button, FlatList, StyleSheet, TouchableOpacity } from 'react-native';
import { ScrollView } from 'react-native-gesture-handler';
import { LineChart } from 'react-native-chart-kit';

const App = () => {
  const [tela, setTela] = useState('configuracao');
  const [tipoTreino, setTipoTreino] = useState('');
  const [exercicios, setExercicios] = useState([]);
  const [diasDescanso, setDiasDescanso] = useState('');
  const [semanas, setSemanas] = useState('');
  const [dadosUsuario, setDadosUsuario] = useState({ peso: '', altura: '', gordura: '', musculo: '' });
  const [dadosIniciais, setDadosIniciais] = useState(null);
  const [cronograma, setCronograma] = useState([]);

  const handleConfiguracaoCompleta = () => {
    const dias = gerarCronograma();
    setCronograma(dias);
    setDadosIniciais({ ...dadosUsuario });
    setTela('cronograma');
  };

  const gerarCronograma = () => {
    const dias = [];
    const dataAtual = new Date();
    const descanso = parseInt(diasDescanso, 10);
    const totalDias = parseInt(semanas, 10) * 7;
    const ordemTreinos = tipoTreino.split('');

    for (let i = 0; i < totalDias; i++) {
      const data = new Date(dataAtual);
      data.setDate(dataAtual.getDate() + i);
      const diaSemana = data.toLocaleDateString('pt-BR', { weekday: 'long' });
      const treino = ordemTreinos[i % ordemTreinos.length];

      dias.push({
        data: data.toLocaleDateString('pt-BR'),
        diaSemana,
        treino,
      });
    }
    return dias;
  };

  const handleTreinoConcluido = (index) => {
    const cronogramaAtualizado = [...cronograma];
    cronogramaAtualizado[index].concluido = true;
    setCronograma(cronogramaAtualizado);
  };

  return (
    <View style={styles.container}>
      {tela === 'configuracao' && (
        <ScrollView>
          <Text style={styles.title}>Configurar Cronograma de Treinos</Text>

          <TextInput
            style={styles.input}
            placeholder="Tipo de Treino (ex.: AB, ABC)"
            value={tipoTreino}
            onChangeText={setTipoTreino}
          />

          <TextInput
            style={styles.input}
            placeholder="Dias de Descanso (ex.: 2)"
            keyboardType="numeric"
            value={diasDescanso}
            onChangeText={setDiasDescanso}
          />

          <TextInput
            style={styles.input}
            placeholder="Semanas (ex.: 4)"
            keyboardType="numeric"
            value={semanas}
            onChangeText={setSemanas}
          />

          <Text style={styles.subtitle}>Dados do Usuário</Text>
          <TextInput
            style={styles.input}
            placeholder="Peso (kg)"
            keyboardType="numeric"
            value={dadosUsuario.peso}
            onChangeText={(value) => setDadosUsuario({ ...dadosUsuario, peso: value })}
          />
          <TextInput
            style={styles.input}
            placeholder="Altura (cm)"
            keyboardType="numeric"
            value={dadosUsuario.altura}
            onChangeText={(value) => setDadosUsuario({ ...dadosUsuario, altura: value })}
          />
          <TextInput
            style={styles.input}
            placeholder="Gordura Corporal (%)"
            keyboardType="numeric"
            value={dadosUsuario.gordura}
            onChangeText={(value) => setDadosUsuario({ ...dadosUsuario, gordura: value })}
          />
          <TextInput
            style={styles.input}
            placeholder="Massa Muscular (%)"
            keyboardType="numeric"
            value={dadosUsuario.musculo}
            onChangeText={(value) => setDadosUsuario({ ...dadosUsuario, musculo: value })}
          />

          <Button title="Concluir Configuração" onPress={handleConfiguracaoCompleta} />
        </ScrollView>
      )}

      {tela === 'cronograma' && (
        <View>
          <Text style={styles.title}>Cronograma de Treinos</Text>
          <FlatList
            data={cronograma}
            keyExtractor={(item, index) => index.toString()}
            renderItem={({ item, index }) => (
              <TouchableOpacity
                style={styles.item}
                onPress={() => handleTreinoConcluido(index)}
              >
                <Text style={styles.itemText}>{`${item.data} (${item.diaSemana}) - ${item.treino}`}</Text>
                {item.concluido && <Text style={styles.completed}>✔️ Concluído</Text>}
              </TouchableOpacity>
            )}
          />
        </View>
      )}

      {tela === 'comparar' && (
        <View>
          <Text style={styles.title}>Comparação de Progresso</Text>
          <LineChart
            data={{
              labels: ['Inicial', 'Atual'],
              datasets: [
                { data: [dadosIniciais.peso, dadosUsuario.peso] },
                { data: [dadosIniciais.gordura, dadosUsuario.gordura] },
                { data: [dadosIniciais.musculo, dadosUsuario.musculo] },
              ],
            }}
            width={320}
            height={220}
            chartConfig={{
              backgroundColor: '#f3f3f3',
              backgroundGradientFrom: '#add8e6',
              backgroundGradientTo: '#ffe4b5',
              color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
              labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
            }}
          />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f3f3f3',
    padding: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
    fontFamily: 'consolas',
    color: '#333',
  },
  input: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 10,
    marginBottom: 15,
    borderRadius: 5,
    backgroundColor: '#fff',
    fontFamily: 'consolas',
  },
  subtitle: {
    fontSize: 18,
    marginBottom: 10,
    fontFamily: 'consolas',
  },
  item: {
    padding: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#ccc',
  },
  itemText: {
    fontSize: 16,
    fontFamily: 'consolas',
  },
  completed: {
    color: 'green',
    fontSize: 14,
    fontFamily: 'consolas',
  },
});

export default App;
